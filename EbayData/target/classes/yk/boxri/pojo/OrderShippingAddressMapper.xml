<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yunke.quartz_order.dao.OrderShippingAddressMapper" >
  <resultMap id="BaseResultMap" type="com.yunke.quartz_order.entity.OrderShippingAddress" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="order_id" property="order_id" jdbcType="VARCHAR" />
    <result column="user_id" property="user_id" jdbcType="INTEGER" />
    <result column="shop_id" property="shop_id" jdbcType="INTEGER" />
    <result column="address_attribute_values" property="address_attribute_values" jdbcType="VARCHAR" />
    <result column="address_id" property="address_id" jdbcType="VARCHAR" />
    <result column="address_owner" property="address_owner" jdbcType="VARCHAR" />
    <result column="address_usage" property="address_usage" jdbcType="VARCHAR" />
    <result column="city_name" property="city_name" jdbcType="VARCHAR" />
    <result column="country" property="country" jdbcType="VARCHAR" />
    <result column="country_name" property="country_name" jdbcType="VARCHAR" />
    <result column="external_address_id" property="external_address_id" jdbcType="VARCHAR" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="phone" property="phone" jdbcType="VARCHAR" />
    <result column="postal_code" property="postal_code" jdbcType="VARCHAR" />
    <result column="state_or_province" property="state_or_province" jdbcType="VARCHAR" />
    <result column="Street1" property="street1" jdbcType="VARCHAR" />
    <result column="Street2" property="street2" jdbcType="VARCHAR" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from order_shipping_address
    where order_id = #{order_id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.yunke.quartz_order.entity.OrderShippingAddress" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into order_shipping_address (order_id, user_id, shop_id, 
      address_attribute_values, address_id, address_owner, 
      address_usage, city_name, country, 
      country_name, external_address_id, name, 
      phone, postal_code, state_or_province, 
      Street1, Street2)
    values (#{order_id,jdbcType=VARCHAR}, #{user_id,jdbcType=INTEGER}, #{shop_id,jdbcType=INTEGER}, 
      #{address_attribute_values,jdbcType=VARCHAR}, #{address_id,jdbcType=VARCHAR}, #{address_owner,jdbcType=VARCHAR}, 
      #{address_usage,jdbcType=VARCHAR}, #{city_name,jdbcType=VARCHAR}, #{country,jdbcType=VARCHAR}, 
      #{country_name,jdbcType=VARCHAR}, #{external_address_id,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, 
      #{phone,jdbcType=VARCHAR}, #{postal_code,jdbcType=VARCHAR}, #{state_or_province,jdbcType=VARCHAR}, 
      #{street1,jdbcType=VARCHAR}, #{street2,jdbcType=VARCHAR})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.yunke.quartz_order.entity.OrderShippingAddress" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update order_shipping_address
    set user_id = #{user_id,jdbcType=INTEGER},
      shop_id = #{shop_id,jdbcType=INTEGER},
      address_attribute_values = #{address_attribute_values,jdbcType=VARCHAR},
      address_id = #{address_id,jdbcType=VARCHAR},
      address_owner = #{address_owner,jdbcType=VARCHAR},
      address_usage = #{address_usage,jdbcType=VARCHAR},
      city_name = #{city_name,jdbcType=VARCHAR},
      country = #{country,jdbcType=VARCHAR},
      country_name = #{country_name,jdbcType=VARCHAR},
      external_address_id = #{external_address_id,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      postal_code = #{postal_code,jdbcType=VARCHAR},
      state_or_province = #{state_or_province,jdbcType=VARCHAR},
      Street1 = #{street1,jdbcType=VARCHAR},
      Street2 = #{street2,jdbcType=VARCHAR}
    where order_id = #{order_id,jdbcType=VARCHAR}
  </update>
  <update id="batchUpdate"  parameterType="com.yunke.quartz_order.entity.OrderShippingAddress">  
    <foreach collection="list" item="item" index="index" open="" close="" separator=";">  
    update order_shipping_address
        <set>  
	  user_id = #{item.user_id,jdbcType=INTEGER},
      shop_id = #{item.shop_id,jdbcType=INTEGER},
      address_attribute_values = #{item.address_attribute_values,jdbcType=VARCHAR},
      address_id = #{item.address_id,jdbcType=VARCHAR},
      address_owner = #{item.address_owner,jdbcType=VARCHAR},
      address_usage = #{item.address_usage,jdbcType=VARCHAR},
      city_name = #{item.city_name,jdbcType=VARCHAR},
      country = #{item.country,jdbcType=VARCHAR},
      country_name = #{item.country_name,jdbcType=VARCHAR},
      external_address_id = #{item.external_address_id,jdbcType=VARCHAR},
      name = #{item.name,jdbcType=VARCHAR},
      phone = #{item.phone,jdbcType=VARCHAR},
      postal_code = #{item.postal_code,jdbcType=VARCHAR},
      state_or_province = #{item.state_or_province,jdbcType=VARCHAR},
      Street1 = #{item.street1,jdbcType=VARCHAR},
      Street2 = #{item.street2,jdbcType=VARCHAR}
          </set>  
         where order_id = #{item.order_id,jdbcType=VARCHAR}  
      </foreach>  
  </update> 
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select order_id, user_id, shop_id, address_attribute_values, address_id, address_owner, 
    address_usage, city_name, country, country_name, external_address_id, name, phone, 
    postal_code, state_or_province, Street1, Street2
    from order_shipping_address
    where order_id = #{order_id,jdbcType=VARCHAR}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select order_id, user_id, shop_id, address_attribute_values, address_id, address_owner, 
    address_usage, city_name, country, country_name, external_address_id, name, phone, 
    postal_code, state_or_province, Street1, Street2
    from order_shipping_address
  </select>
  <select id="dynamicSelect" resultMap="BaseResultMap" parameterType="java.lang.String" >
   select order_id, user_id, shop_id, address_attribute_values, address_id, address_owner, 
    address_usage, city_name, country, country_name, external_address_id, name, phone, 
    postal_code, state_or_province, Street1, Street2
    from order_shipping_address
    where order_id in
    <foreach collection="list" item="order_id" 
 		separator="," open="(" close=")">
 			#{order_id,jdbcType=VARCHAR}
 	</foreach> 
  </select>
  <insert id="insertBatch" parameterType="com.yunke.quartz_order.entity.OrderShippingAddress" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into order_shipping_address (order_id, 
      user_id, shop_id, address_attribute_values, 
      address_id, address_owner, address_usage, 
      city_name, country, country_name, 
      external_address_id, name, phone, 
      postal_code, state_or_province, 
      Street1, Street2)
    values <foreach collection="list" item="item" index="index" separator="," > (#{item.order_id,jdbcType=VARCHAR}, 
      #{item.user_id,jdbcType=INTEGER}, #{item.shop_id,jdbcType=INTEGER}, #{item.address_attribute_values,jdbcType=VARCHAR}, 
      #{item.address_id,jdbcType=VARCHAR}, #{item.address_owner,jdbcType=VARCHAR}, #{item.address_usage,jdbcType=VARCHAR}, 
      #{item.city_name,jdbcType=VARCHAR}, #{item.country,jdbcType=VARCHAR}, #{item.country_name,jdbcType=VARCHAR}, 
      #{item.external_address_id,jdbcType=VARCHAR}, #{item.name,jdbcType=VARCHAR}, #{item.phone,jdbcType=VARCHAR}, 
      #{item.postal_code,jdbcType=VARCHAR}, #{item.state_or_province,jdbcType=VARCHAR}, 
      #{item.street1,jdbcType=VARCHAR}, #{item.street2,jdbcType=VARCHAR})</foreach>
  </insert>
   <insert id="mergerBatch" parameterType="com.yunke.quartz_order.entity.OrderShippingAddress" > 
	insert into order_shipping_address (order_id, 
      user_id, shop_id, address_attribute_values, 
      address_id, address_owner, address_usage, 
      city_name, country, country_name, 
      external_address_id, name, phone, 
      postal_code, state_or_province, 
      Street1, Street2)
    values <foreach collection="list" item="item" index="index" separator="," > (#{item.order_id,jdbcType=VARCHAR}, 
      #{item.user_id,jdbcType=INTEGER}, #{item.shop_id,jdbcType=INTEGER}, #{item.address_attribute_values,jdbcType=VARCHAR}, 
      #{item.address_id,jdbcType=VARCHAR}, #{item.address_owner,jdbcType=VARCHAR}, #{item.address_usage,jdbcType=VARCHAR}, 
      #{item.city_name,jdbcType=VARCHAR}, #{item.country,jdbcType=VARCHAR}, #{item.country_name,jdbcType=VARCHAR}, 
      #{item.external_address_id,jdbcType=VARCHAR}, #{item.name,jdbcType=VARCHAR}, #{item.phone,jdbcType=VARCHAR}, 
      #{item.postal_code,jdbcType=VARCHAR}, #{item.state_or_province,jdbcType=VARCHAR}, 
      #{item.street1,jdbcType=VARCHAR}, #{item.street2,jdbcType=VARCHAR})</foreach>
	ON DUPLICATE KEY UPDATE
	  user_id = VALUES(user_id),
      shop_id = VALUES(shop_id),
      address_attribute_values = VALUES(address_attribute_values),
      address_id = VALUES(address_id),
      address_owner = VALUES(address_owner),
      address_usage = VALUES(address_usage),
      city_name = VALUES(city_name),
      country = VALUES(country),
      country_name = VALUES(country_name),
      external_address_id = VALUES(external_address_id),
      name = VALUES(name),
      phone = VALUES(phone),
      postal_code = VALUES(postal_code),
      state_or_province = VALUES(state_or_province),
      Street1 = VALUES(Street1),
      Street2 = VALUES(Street2)
	</insert>
</mapper>